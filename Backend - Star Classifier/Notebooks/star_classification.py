# -*- coding: utf-8 -*-
"""Star_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZDVVZpEUCbTFfTGN37m7kcNIe2aoGAh0
"""

# ABOUT DATASET
# Temperature:- Temperature in Kelvin
# Ro :- Radius of star wrt to the sun
# Lo:- Luminosity of the star relative to the sun
# Color :- Color of the star
# Spectral_Class:- An asteroid spectral type is assigned to asteroids based on their emission spectrum, color, and sometimes albedo. 
# These types are thought to correspond to an asteroid's surface composition.
#
# Type:
#
# Red Dwarf - 0 
# Brown Dwarf - 1 
# White Dwarf - 2 
# Main Sequence - 3 
# Super Giant - 4 
# Hyper Giant - 5

"""**IMPORTS**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

"""**LOADING DATA**"""

stars = pd.read_csv('/content/Stars.csv')
stars

"""**DATA EXPLORATION**"""

# first 5 rows
stars.head()

# last 5 rows
stars.tail()

# datatypes
stars.dtypes

stars.columns

stars.info()

stars.describe()

# null values
stars.isnull().sum()

# duplicated values
stars.duplicated().sum()

# Red Dwarf - 0 
# Brown Dwarf - 1 
# White Dwarf - 2 
# Main Sequence - 3 
# Super Giant - 4 
# Hyper Giant - 5

star_types = {
    0: "Red Dwarf",
    1: "Brown Dwarf",
    2: "White Dwarf",
    3: "Main Sequence",
    4: "Super Giant",
    5: "Hyper Giant"
}

# change star types from integers to real types of stars
for index in tqdm(range(len(star_types.keys()))):
  stars["Type"] = stars["Type"].replace(index, star_types[index])

stars.head()

plt.figure(figsize=(20, 10))
plt.title("Total number of stars for each type")

sns.barplot(x=stars['Type'].unique(), y=stars['Type'].value_counts())

plt.ylabel("Number of stars")
plt.show()

# in the below chart, we can observe we have 40 records of each type of star

plt.figure(figsize=(20, 10))
plt.title("Temperature and Radius")

sns.scatterplot(x=stars['Temperature'], 
                y=stars['R'],
                hue=stars['Type'],
                data=stars)

plt.ylabel("Radius")
plt.show()

# here we can observe that "Hyper Giants" have a bigger radius than the other types

plt.figure(figsize=(20, 10))
plt.title("Temperature and Luminosity")

sns.scatterplot(x=stars['Temperature'], 
                y=stars['L'],
                hue=stars['Type'],
                data=stars)

plt.ylabel("Luminosity")
plt.show()

# So, "Hyper Giants" tend to be the most luminous ones, but "Super Giants" which are smaller are equally luminous
# There must be a relation between Luminosity and Radius, where "Super Giants" are an exception

plt.figure(figsize=(20, 10))
plt.title("Radius and Luminosity")

sns.scatterplot(x=stars['R'], 
                y=stars['L'],
                hue=stars['Type'],
                data=stars)

plt.ylabel("Luminosity")
plt.show()

# we can observe that "Hyper Giants" are the biggest and brightest, followed by "Super Giants"

# get dataset without the replaced Star Types
stars_types_not_replaced = pd.read_csv('/content/Stars.csv')

plt.figure(figsize=(20, 10))

sns.heatmap(stars_types_not_replaced.corr(), annot=True, linewidths=1)
plt.show()

# here we can observe a correlation between the Star Type and the Absolute Magnitude

"""**GET VALUES FOR KEYBOARD INPUT**"""

# get rows to test
nr_test_values = 5

test_values = stars.sample(nr_test_values)
test_values

test_values_X = test_values.drop(["Type", "Color", "Spectral_Class"], axis=1)
test_values_X

test_values_y = test_values["Type"]
test_values_y

# drop rows that will be used for test
for index in test_values.index:
  stars = stars.drop(index)

"""**PREDICT & CHECK SCORE**"""

features = stars.drop(["Type", "Color", "Spectral_Class"], axis=1)
target = stars["Type"]

X = features
y = target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 42)

clf = DecisionTreeClassifier(max_depth = 50)
clf = clf.fit(X_train, y_train)

clf.get_params()

predictions = clf.predict(X_test)
predictions

accuracy_score(y_test, predictions)

"""**SIMULATE KEYBOARD INPUT**"""

# predict on selected values for test
test_predictions = clf.predict(test_values_X)
test_predictions

accuracy_score(test_values_y, test_predictions)

test_values_y

"""**PRINT THE GENERATED DECISION TREE**"""

import os
from graphviz import Source
from sklearn.tree import export_graphviz

PROJECT_ROOT_DIR = "."
CHAPTER_ID = "decision_trees"
IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID)
os.makedirs(IMAGES_PATH, exist_ok=True)

export_graphviz(
        clf,
        out_file=os.path.join(IMAGES_PATH, "stars_tree.dot"),
        feature_names=["Temperature", "L", "R", "A_M"],
        class_names=stars["Type"].unique(),
        rounded=True,
        filled=True
    )

Source.from_file(os.path.join(IMAGES_PATH, "stars_tree.dot"))

"""**EXPORT MODEL**"""

from joblib import dump, load

dump(clf, 'Star_Classifier.joblib')
clf = load('Star_Classifier.joblib')